// bg-color -> background-color
$hu-bg-color-core-modules: hu-get-class-modules($hu-bg-color-modules, core, $hu-bg-color-modules);
$hu-bg-color-pseudos: hu-get-class-modules($hu-bg-color-modules, pseudos, null);
$hu-bg-color-parents: hu-get-class-modules($hu-bg-color-modules, parents, null);

@each $module in hu-format-modules($hu-bg-color-core-modules) {
  @each $hue, $colors in $hu-bg-color-types {
    @each $scale, $value in $colors {
      $class-name: hu-class-name(bg-color-#{$hue}-#{$scale});
      $property: background-color;

      @include hu-generic($class-name, $module) {
        #{$property}: $value #{hu-important()};
      }
    }
  }
}

@if (index($hu-bg-color-core-modules, responsive)) {
  @each $mq-scale, $mq-value in $hu-media-queries {
    @include hu-media-query($mq-value) {
      @each $hue, $colors in $hu-bg-color-types {
        @each $scale, $value in $colors {
          $class-name: hu-class-name(bg-color-#{$hue}-#{$scale});
          $property: background-color;

          @include hu-responsive($class-name, $hu-bg-color-core-modules, $mq-scale) {
            #{$property}: $value #{hu-important()};
          }
        }
      }
    }
  }
}

@if ($hu-bg-color-pseudos) {
  @each $module in hu-format-modules($hu-bg-color-core-modules) {
    @each $hue, $colors in $hu-bg-color-types {
      @each $scale, $value in $colors {
        $class-name: hu-class-name(bg-color-#{$hue}-#{$scale});
        $property: background-color;

        @include hu-pseudo($class-name, $hu-bg-color-pseudos, $module) {
          #{$property}: $value #{hu-important()};
        }
      }
    }
  }

  @if (index($hu-bg-color-core-modules, responsive)) {
    @each $mq-scale, $mq-value in $hu-media-queries {
      @include hu-media-query($mq-value) {
        @each $hue, $colors in $hu-bg-color-types {
          @each $scale, $value in $colors {
            $class-name: hu-class-name(bg-color-#{$hue}-#{$scale});
            $property: background-color;

            @include hu-pseudo-responsive($class-name, $hu-bg-color-pseudos, $hu-bg-color-core-modules, $mq-scale) {
              #{$property}: $value #{hu-important()};
            }
          }
        }
      }
    }
  }
}

@if ($hu-bg-color-parents) {
  @each $module in hu-format-modules($hu-bg-color-core-modules) {
    @each $hue, $colors in $hu-bg-color-types {
      @each $scale, $value in $colors {
        $class-name: hu-class-name(bg-color-#{$hue}-#{$scale});
        $property: background-color;

        @include hu-parent($class-name, $hu-bg-color-parents, $module) {
          #{$property}: $value #{hu-important()};
        }
      }
    }
  }

  @if (index($hu-bg-color-core-modules, responsive)) {
    @each $mq-scale, $mq-value in $hu-media-queries {
      @include hu-media-query($mq-value) {
        @each $hue, $colors in $hu-bg-color-types {
          @each $scale, $value in $colors {
            $class-name: hu-class-name(bg-color-#{$hue}-#{$scale});
            $property: background-color;

            @include hu-parent-responsive($class-name, $hu-bg-color-parents, $hu-bg-color-core-modules, $mq-scale) {
              #{$property}: $value #{hu-important()};
            }
          }
        }
      }
    }
  }
}